{"version":3,"file":"index-fe336201.js","sources":["../../src/components/Canvas/PhysicsCanvas.jsx","../../src/simulations/NewtonianMotion/config.js","../../src/physics/vectors.js","../../src/physics/forces.js","../../src/physics/kinematics.js","../../src/physics/utils.js","../../src/simulations/NewtonianMotion/engine.js","../../src/simulations/NewtonianMotion/index.jsx"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport styled from '@emotion/styled';\n\nconst Canvas = styled.canvas`\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst PhysicsCanvas = ({\n  width = 800,\n  height = 600,\n  onSetup,\n  onDraw,\n  isRunning = true,\n}) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const lastTimestampRef = useRef(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Set up canvas resolution for retina displays\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n\n    // Apply retina scale transform\n    context.setTransform(dpr, 0, 0, dpr, 0, 0);\n    \n    // Move origin to center for easier physics calculations\n    context.translate(width / 2, height / 2);\n\n    contextRef.current = context;\n\n    // Initialize canvas with setup function if provided\n    if (onSetup) {\n      onSetup(context);\n    }\n\n    // Clear any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    const animate = (timestamp) => {\n      if (!lastTimestampRef.current) lastTimestampRef.current = timestamp;\n      const deltaTime = (timestamp - lastTimestampRef.current) / 1000; // Convert to seconds\n      lastTimestampRef.current = timestamp;\n\n      context.save();\n      context.clearRect(-width / 2, -height / 2, width, height);\n      \n      if (onDraw) {\n        onDraw(context, deltaTime);\n      }\n      \n      context.restore();\n\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    if (isRunning) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [width, height, onSetup, onDraw, isRunning]);\n\n  return <Canvas ref={canvasRef} />;\n};\n\nexport default PhysicsCanvas;","export const config = {\n  canvas: {\n    width: 800,\n    height: 600,\n    scale: 50, // pixels per meter (smaller scale to see more of the world)\n  },\n  physics: {\n    timeStep: 1 / 60, // 60 FPS\n    gravityEnabled: true,\n    frictionEnabled: true,\n    airResistanceEnabled: false,\n  },\n  controls: [\n    {\n      id: 'mass',\n      label: 'Mass',\n      type: 'number',\n      min: 0.1,\n      max: 5.0,\n      step: 0.1,\n      value: 1.0,\n      unit: 'kg',\n    },\n    {\n      id: 'force',\n      label: 'Applied Force',\n      type: 'number',\n      min: 0,\n      max: 20,\n      step: 0.5,\n      value: 5,\n      unit: 'N',\n    },\n    {\n      id: 'angle',\n      label: 'Force Angle',\n      type: 'number',\n      min: -180,\n      max: 180,\n      step: 1,\n      value: 0,\n      unit: '°',\n    },\n    {\n      id: 'friction',\n      label: 'Friction Coefficient',\n      type: 'number',\n      min: 0,\n      max: 1,\n      step: 0.01,\n      value: 0.1,\n      unit: '',\n    },\n  ],\n};","/**\n * Vector operations for physics calculations\n */\n\nexport class Vector2D {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  // Vector addition\n  add(vector) {\n    return new Vector2D(this.x + vector.x, this.y + vector.y);\n  }\n\n  // Vector subtraction\n  subtract(vector) {\n    return new Vector2D(this.x - vector.x, this.y - vector.y);\n  }\n\n  // Scalar multiplication\n  multiply(scalar) {\n    return new Vector2D(this.x * scalar, this.y * scalar);\n  }\n\n  // Dot product\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y;\n  }\n\n  // Vector magnitude\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  // Unit vector\n  normalize() {\n    const mag = this.magnitude();\n    return mag === 0 ? new Vector2D(0, 0) : this.multiply(1 / mag);\n  }\n\n  // Vector angle (in radians)\n  angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  // Create vector from angle and magnitude\n  static fromAngle(angle, magnitude = 1) {\n    return new Vector2D(\n      magnitude * Math.cos(angle),\n      magnitude * Math.sin(angle)\n    );\n  }\n\n  // Create a copy of the vector\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}","import { Vector2D } from './vectors';\n\n/**\n * Common force calculations for physics simulations\n */\n\n// Constants\nexport const G = 9.81; // Gravitational acceleration (m/s²)\n\nexport class Force {\n  /**\n   * Calculate gravitational force\n   * @param {number} mass - Mass of the object (kg)\n   * @returns {Vector2D} - Gravitational force vector\n   */\n  static gravity(mass) {\n    return new Vector2D(0, mass * G);\n  }\n\n  /**\n   * Calculate spring force using Hooke's Law\n   * @param {Vector2D} displacement - Spring displacement from rest position\n   * @param {number} k - Spring constant (N/m)\n   * @returns {Vector2D} - Spring force vector\n   */\n  static spring(displacement, k) {\n    return displacement.multiply(-k);\n  }\n\n  /**\n   * Calculate friction force\n   * @param {Vector2D} velocity - Velocity vector\n   * @param {number} coefficient - Coefficient of friction\n   * @param {number} normalForce - Normal force magnitude\n   * @returns {Vector2D} - Friction force vector\n   */\n  static friction(velocity, coefficient, normalForce) {\n    if (velocity.magnitude() === 0) return new Vector2D(0, 0);\n    return velocity.normalize().multiply(-coefficient * normalForce);\n  }\n\n  /**\n   * Calculate air resistance force\n   * @param {Vector2D} velocity - Velocity vector\n   * @param {number} coefficient - Drag coefficient\n   * @param {number} area - Cross-sectional area (m²)\n   * @param {number} airDensity - Air density (kg/m³)\n   * @returns {Vector2D} - Air resistance force vector\n   */\n  static airResistance(velocity, coefficient, area, airDensity = 1.225) {\n    const speed = velocity.magnitude();\n    const dragMagnitude = 0.5 * coefficient * area * airDensity * speed * speed;\n    return speed === 0\n      ? new Vector2D(0, 0)\n      : velocity.normalize().multiply(-dragMagnitude);\n  }\n\n  /**\n   * Calculate centripetal force\n   * @param {number} mass - Mass of the object (kg)\n   * @param {number} velocity - Tangential velocity magnitude (m/s)\n   * @param {number} radius - Radius of circular motion (m)\n   * @returns {number} - Centripetal force magnitude\n   */\n  static centripetal(mass, velocity, radius) {\n    return (mass * velocity * velocity) / radius;\n  }\n}","import { Vector2D } from './vectors';\n\n/**\n * Kinematics calculations for physics simulations\n */\n\nexport class Kinematics {\n  /**\n   * Calculate displacement given initial velocity, acceleration, and time\n   * @param {Vector2D} initialVelocity - Initial velocity vector\n   * @param {Vector2D} acceleration - Acceleration vector\n   * @param {number} time - Time interval (s)\n   * @returns {Vector2D} - Displacement vector\n   */\n  static displacement(initialVelocity, acceleration, time) {\n    return initialVelocity\n      .multiply(time)\n      .add(acceleration.multiply(0.5 * time * time));\n  }\n\n  /**\n   * Calculate final velocity given initial velocity, acceleration, and time\n   * @param {Vector2D} initialVelocity - Initial velocity vector\n   * @param {Vector2D} acceleration - Acceleration vector\n   * @param {number} time - Time interval (s)\n   * @returns {Vector2D} - Final velocity vector\n   */\n  static finalVelocity(initialVelocity, acceleration, time) {\n    return initialVelocity.add(acceleration.multiply(time));\n  }\n\n  /**\n   * Calculate projectile motion parameters\n   * @param {number} initialVelocity - Initial velocity magnitude (m/s)\n   * @param {number} angle - Launch angle (radians)\n   * @param {number} height - Initial height (m)\n   * @returns {Object} - Projectile motion parameters\n   */\n  static projectileMotion(initialVelocity, angle, height = 0) {\n    const g = 9.81; // gravitational acceleration\n    const v0x = initialVelocity * Math.cos(angle);\n    const v0y = initialVelocity * Math.sin(angle);\n\n    // Time of flight\n    const timeOfFlight =\n      (v0y + Math.sqrt(v0y * v0y + 2 * g * height)) / g;\n\n    // Maximum height\n    const maxHeight = height + (v0y * v0y) / (2 * g);\n\n    // Range\n    const range = v0x * timeOfFlight;\n\n    return {\n      timeOfFlight,\n      maxHeight,\n      range,\n      initialVelocityX: v0x,\n      initialVelocityY: v0y,\n    };\n  }\n\n  /**\n   * Calculate position at any time during projectile motion\n   * @param {number} initialVelocity - Initial velocity magnitude (m/s)\n   * @param {number} angle - Launch angle (radians)\n   * @param {number} time - Time (s)\n   * @param {number} initialHeight - Initial height (m)\n   * @returns {Vector2D} - Position vector\n   */\n  static projectilePosition(\n    initialVelocity,\n    angle,\n    time,\n    initialHeight = 0\n  ) {\n    const g = 9.81;\n    const x = initialVelocity * Math.cos(angle) * time;\n    const y =\n      initialHeight +\n      initialVelocity * Math.sin(angle) * time -\n      0.5 * g * time * time;\n    return new Vector2D(x, y);\n  }\n\n  /**\n   * Calculate circular motion parameters\n   * @param {number} radius - Radius of circular path (m)\n   * @param {number} angularVelocity - Angular velocity (rad/s)\n   * @returns {Object} - Circular motion parameters\n   */\n  static circularMotion(radius, angularVelocity) {\n    const period = (2 * Math.PI) / angularVelocity;\n    const frequency = 1 / period;\n    const tangentialVelocity = radius * angularVelocity;\n    const centripetalAcceleration = tangentialVelocity * angularVelocity;\n\n    return {\n      period,\n      frequency,\n      tangentialVelocity,\n      centripetalAcceleration,\n    };\n  }\n}","/**\n * Utility functions for physics calculations\n */\n\n// Convert degrees to radians\nexport const toRadians = (degrees) => (degrees * Math.PI) / 180;\n\n// Convert radians to degrees\nexport const toDegrees = (radians) => (radians * 180) / Math.PI;\n\n// Round to specified decimal places\nexport const roundTo = (value, decimals = 2) => {\n  const factor = Math.pow(10, decimals);\n  return Math.round(value * factor) / factor;\n};\n\n// Linear interpolation\nexport const lerp = (start, end, t) => start + (end - start) * t;\n\n// Clamp value between min and max\nexport const clamp = (value, min, max) => Math.min(Math.max(value, min), max);\n\n// Calculate percentage\nexport const percentage = (value, total) => (value / total) * 100;\n\n// Convert between units\nexport const units = {\n  // Length\n  meterToKilometer: (m) => m / 1000,\n  kilometerToMeter: (km) => km * 1000,\n  meterToCentimeter: (m) => m * 100,\n  centimeterToMeter: (cm) => cm / 100,\n\n  // Mass\n  kilogramToGram: (kg) => kg * 1000,\n  gramToKilogram: (g) => g / 1000,\n\n  // Time\n  secondToMillisecond: (s) => s * 1000,\n  millisecondToSecond: (ms) => ms / 1000,\n  secondToMinute: (s) => s / 60,\n  minuteToSecond: (min) => min * 60,\n\n  // Speed\n  mpsToKmph: (mps) => mps * 3.6,\n  kmphToMps: (kmph) => kmph / 3.6,\n\n  // Angle\n  degreeToRadian: toRadians,\n  radianToDegree: toDegrees,\n\n  // Force\n  newtonToKilonewton: (n) => n / 1000,\n  kilonewtonToNewton: (kn) => kn * 1000,\n\n  // Energy\n  jouleToKilojoule: (j) => j / 1000,\n  kilojouleToJoule: (kj) => kj * 1000,\n};\n\n// Physics constants\nexport const constants = {\n  G: 9.81, // Gravitational acceleration (m/s²)\n  g: 6.67430e-11, // Gravitational constant (m³/kg/s²)\n  c: 299792458, // Speed of light (m/s)\n  h: 6.62607015e-34, // Planck constant (J⋅s)\n  e: 1.602176634e-19, // Elementary charge (C)\n  me: 9.1093837015e-31, // Electron mass (kg)\n  mp: 1.67262192369e-27, // Proton mass (kg)\n  k: 1.380649e-23, // Boltzmann constant (J/K)\n  Na: 6.02214076e23, // Avogadro constant (mol⁻¹)\n  R: 8.31446261815324, // Gas constant (J/(mol⋅K))\n};","import { Vector2D } from '../../physics/vectors';\nimport { Force } from '../../physics/forces';\nimport { Kinematics } from '../../physics/kinematics';\nimport { toRadians } from '../../physics/utils';\n\nexport class NewtonianMotionEngine {\n  constructor(config) {\n    this.config = config;\n    this.reset();\n  }\n\n  reset() {\n    this.position = new Vector2D(-2, 0); // Start slightly to the left\n    this.velocity = new Vector2D(0, 0);\n    this.acceleration = new Vector2D(0, 0);\n    this.mass = this.config.controls.find(c => c.id === 'mass').value;\n    this.force = this.config.controls.find(c => c.id === 'force').value;\n    this.angle = this.config.controls.find(c => c.id === 'angle').value;\n    this.frictionCoef = this.config.controls.find(\n      c => c.id === 'friction'\n    ).value;\n  }\n\n  update(deltaTime) {\n    // Calculate applied force vector\n    const appliedForce = Vector2D.fromAngle(\n      toRadians(this.angle),\n      this.force\n    );\n\n    // Calculate normal force (simplified for horizontal surface)\n    const normalForce = this.mass * Force.G;\n\n    // Calculate friction force - only applies when moving\n    const frictionForce = Force.friction(\n      this.velocity,\n      this.frictionCoef,\n      normalForce\n    );\n\n    // Sum all forces\n    let netForce;\n    if (this.config.physics.gravityEnabled) {\n      // For horizontal motion, gravity is balanced by normal force\n      netForce = appliedForce.add(frictionForce);\n    } else {\n      netForce = appliedForce.add(frictionForce);\n    }\n\n    // Calculate acceleration (F = ma)\n    this.acceleration = netForce.multiply(1 / this.mass);\n\n    // Update velocity and position using kinematics equations\n    this.velocity = Kinematics.finalVelocity(\n      this.velocity,\n      this.acceleration,\n      deltaTime\n    );\n\n    const displacement = Kinematics.displacement(\n      this.velocity,\n      this.acceleration,\n      deltaTime\n    );\n    this.position = this.position.add(displacement);\n\n    // Keep object within canvas bounds with elastic collisions\n    const { width, height, scale } = this.config.canvas;\n    const maxX = (width / 2) / scale;\n    const maxY = (height / 2) / scale;\n\n    if (Math.abs(this.position.x) > maxX) {\n      this.position.x = Math.sign(this.position.x) * maxX;\n      this.velocity.x *= -0.8; // Elastic collision with walls\n      this.velocity.y *= 0.99; // Small damping\n    }\n\n    if (Math.abs(this.position.y) > maxY) {\n      this.position.y = Math.sign(this.position.y) * maxY;\n      this.velocity.y *= -0.8; // Elastic collision with floor/ceiling\n      this.velocity.x *= 0.99; // Small damping\n    }\n\n    // Apply velocity threshold to prevent infinite tiny motion\n    if (this.velocity.magnitude() < 0.01) {\n      this.velocity = new Vector2D(0, 0);\n    }\n  }\n\n  getState() {\n    return {\n      position: this.position,\n      velocity: this.velocity,\n      acceleration: this.acceleration,\n    };\n  }\n\n  updateControl(id, value) {\n    switch (id) {\n      case 'mass':\n        this.mass = value;\n        break;\n      case 'force':\n        this.force = value;\n        break;\n      case 'angle':\n        this.angle = value;\n        break;\n      case 'friction':\n        this.frictionCoef = value;\n        break;\n    }\n  }\n}","import { useState, useCallback, useRef, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport PhysicsCanvas from '../../components/Canvas/PhysicsCanvas';\nimport { config } from './config';\nimport { NewtonianMotionEngine } from './engine';\nimport { Vector2D } from '@physics/vectors';\n\nconst SimulationContainer = styled.div`\n  display: flex;\n  gap: 2rem;\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst Controls = styled.div`\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 300px;\n`;\n\nconst Control = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #666;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 0.25rem;\n  \n  &:focus {\n    outline: none;\n    border-color: #007bff;\n  }\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 0.75rem;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  margin-bottom: 1rem;\n\n  &:hover {\n    background: #0056b3;\n  }\n\n  &:disabled {\n    background: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst NewtonianMotion = ({ onBack }) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [controls, setControls] = useState(config.controls);\n  const engineRef = useRef(new NewtonianMotionEngine(config));\n\n  const handleStart = () => setIsRunning(prev => !prev);\n  \n  const handleReset = () => {\n    engineRef.current.reset();\n    setControls(config.controls);\n  };\n\n  const handleControlChange = (id, value) => {\n    setControls(prev =>\n      prev.map(control =>\n        control.id === id ? { ...control, value: Number(value) } : control\n      )\n    );\n    engineRef.current.updateControl(id, Number(value));\n  };\n\n  const setupCanvas = useCallback((context) => {\n    const { width, height } = config.canvas;\n    context.lineWidth = 2;\n    context.font = '14px Arial';\n    context.textAlign = 'center';\n  }, []);\n\n  const drawGrid = useCallback((context) => {\n    const { width, height, scale } = config.canvas;\n    context.strokeStyle = '#ddd';\n    context.lineWidth = 0.5;\n\n    // Draw grid\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    // Draw grid\n    for (let x = -halfWidth; x <= halfWidth; x += scale) {\n      context.beginPath();\n      context.moveTo(x, -halfHeight);\n      context.lineTo(x, halfHeight);\n      context.stroke();\n    }\n    \n    for (let y = -halfHeight; y <= halfHeight; y += scale) {\n      context.beginPath();\n      context.moveTo(-halfWidth, y);\n      context.lineTo(halfWidth, y);\n      context.stroke();\n    }\n\n    // Draw axes\n    context.strokeStyle = '#999';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(-halfWidth, 0);\n    context.lineTo(halfWidth, 0);\n    context.moveTo(0, -halfHeight);\n    context.lineTo(0, halfHeight);\n    context.stroke();\n  }, []);\n\n  const drawObject = useCallback((context, position, velocity) => {\n    const { scale } = config.canvas;\n    const mass = controls.find(c => c.id === 'mass').value;\n    const radius = Math.sqrt(mass) * 10;\n\n    // Draw object\n    context.fillStyle = '#007bff';\n    context.beginPath();\n    context.arc(position.x * scale, position.y * scale, radius, 0, Math.PI * 2);\n    context.fill();\n\n    // Draw velocity vector\n    if (velocity.magnitude() > 0) {\n      const velocityScale = 20;\n      const endPoint = position.add(velocity.multiply(velocityScale));\n      \n      context.strokeStyle = '#ff4444';\n      context.beginPath();\n      context.moveTo(position.x * scale, position.y * scale);\n      context.lineTo(endPoint.x * scale, endPoint.y * scale);\n      context.stroke();\n    }\n  }, [controls]);\n\n  const handleDraw = useCallback((context, deltaTime) => {\n    if (!isRunning) return;\n\n    const { width, height } = config.canvas;\n    \n    // Update physics\n    engineRef.current.update(deltaTime);\n    const state = engineRef.current.getState();\n\n    // Clear canvas\n    context.clearRect(0, 0, width, height);\n    \n    // Draw background elements\n    drawGrid(context);\n    \n    // Draw physics object\n    drawObject(context, state.position, state.velocity);\n  }, [isRunning, drawGrid, drawObject]);\n\n  return (\n    <SimulationContainer>\n      <div>\n        <Button onClick={onBack}>← Back to Simulations</Button>\n        <PhysicsCanvas\n          width={config.canvas.width}\n          height={config.canvas.height}\n          onSetup={setupCanvas}\n          onDraw={handleDraw}\n        />\n      </div>\n      <Controls>\n        <Control>\n          <Button onClick={handleStart}>\n            {isRunning ? 'Pause' : 'Start'} Simulation\n          </Button>\n          <Button onClick={handleReset}>Reset</Button>\n        </Control>\n        {controls.map(control => (\n          <Control key={control.id}>\n            <Label>\n              {control.label} ({control.unit})\n            </Label>\n            <Input\n              type={control.type}\n              min={control.min}\n              max={control.max}\n              step={control.step}\n              value={control.value}\n              onChange={(e) => handleControlChange(control.id, e.target.value)}\n            />\n            <div style={{ fontSize: '0.8rem', color: '#666' }}>\n              {control.min} - {control.max} {control.unit}\n            </div>\n          </Control>\n        ))}\n      </Controls>\n    </SimulationContainer>\n  );\n};\n\nexport default NewtonianMotion;"],"names":["Canvas","styled","PhysicsCanvas","width","height","onSetup","onDraw","isRunning","canvasRef","useRef","contextRef","animationFrameRef","lastTimestampRef","useEffect","canvas","context","dpr","animate","timestamp","deltaTime","jsx","config","Vector2D","x","y","vector","scalar","mag","angle","magnitude","G","Force","mass","displacement","k","velocity","coefficient","normalForce","area","airDensity","speed","dragMagnitude","radius","Kinematics","initialVelocity","acceleration","time","v0x","v0y","timeOfFlight","maxHeight","range","initialHeight","angularVelocity","period","frequency","tangentialVelocity","centripetalAcceleration","toRadians","degrees","NewtonianMotionEngine","c","appliedForce","frictionForce","netForce","scale","maxX","maxY","id","value","SimulationContainer","Controls","Control","Label","Input","Button","NewtonianMotion","onBack","setIsRunning","useState","controls","setControls","engineRef","handleStart","prev","handleReset","handleControlChange","control","setupCanvas","useCallback","drawGrid","halfWidth","halfHeight","drawObject","position","endPoint","handleDraw","state","jsxs","e"],"mappings":"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"}